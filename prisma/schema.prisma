generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id             String   @id @default(cuid())
  createdById    String
  title          String
  description    String?
  imageUrl       String?
  price          Float?
  isPublished    Boolean  @default(false)
  isFree         Boolean  @default(false)
  prerequisites  String[] @default([])
  difficulty     String   @default("beginner")
  estimatedHours Int?
  xpReward       Int      @default(200)

  attachments Attachment[]
  category    Category?    @relation(fields: [categoryId], references: [id])
  categoryId  String?
  chapters    Chapter[]
  purchases   Purchase[]
  quizzes     Quiz[]
  assignments Assignment[]
  certificates Certificate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id      String   @id @default(cuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id String @id @default(cuid())

  name String
  url  String

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(cuid())
  title       String
  description String?
  videoUrl    String?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)
  xpReward    Int     @default(50)

  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String
  muxData      MuxData?
  userProgress UserProgress[]
  quizzes      Quiz[]
  assignments  Assignment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MuxData {
  id         String  @id @default(cuid())
  assetId    String
  playbackId String?

  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String  @unique
}

model UserProgress {
  id     String @id @default(cuid())
  userId String

  chapter     Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId   String
  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
}

model Purchase {
  id     String @id @default(cuid())
  userId String

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

model StripeCustomer {
  id String @id @default(cuid())

  userid           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserXP {
  id             String   @id @default(cuid())
  userId         String   @unique
  totalXP        Int      @default(0)
  level          Int      @default(1)
  currentLevelXP Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  xpTransactions XPTransaction[]
}

model XPTransaction {
  id         String   @id @default(cuid())
  userId     String
  amount     Int
  reason     String
  sourceType String
  sourceId   String?
  createdAt  DateTime @default(now())

  userXP UserXP @relation(fields: [userId], references: [userId])

  @@index([userId, createdAt])
}

model Achievement {
  id          String   @id @default(cuid())
  name        String
  description String
  icon        String
  category    String
  condition   Json
  xpReward    Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime    @default(now())

  achievement Achievement @relation(fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
}

model UserStreak {
  id               String    @id @default(cuid())
  userId           String    @unique
  currentStreak    Int       @default(0)
  longestStreak    Int       @default(0)
  lastActivityDate DateTime?
  freezesUsed      Int       @default(0)
  freezesAvailable Int       @default(3)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Quiz {
  id           String    @id @default(cuid())
  title        String
  description  String?
  chapterId    String?
  courseId     String?
  timeLimit    Int?
  maxAttempts  Int       @default(3)
  passingScore Int       @default(70)
  isPublished  Boolean   @default(false)
  xpReward     Int       @default(25)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  chapter      Chapter?  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  course       Course?   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions    Question[]
  attempts     QuizAttempt[]

  @@index([chapterId])
  @@index([courseId])
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  FILL_IN_THE_BLANK
}

model Question {
  id            String   @id @default(cuid())
  quizId        String
  type          QuestionType @default(MULTIPLE_CHOICE)
  question      String
  options       Json?
  correctAnswer Json
  explanation   String?
  points        Int      @default(1)
  order         Int
  createdAt     DateTime @default(now())

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([quizId, order])
}

model QuizAttempt {
  id          String   @id @default(cuid())
  userId      String
  quizId      String
  answers     Json
  score       Float
  totalPoints Int
  timeSpent   Int?
  completedAt DateTime @default(now())

  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@index([userId, quizId])
}

model Assignment {
  id                  String   @id @default(cuid())
  title               String
  description         String
  chapterId           String?
  courseId            String?
  dueDate             DateTime?
  maxPoints           Int      @default(100)
  rubric              Json?    // Add this line
  allowLateSubmission Boolean  @default(true)
  isPublished         Boolean  @default(false)
  xpReward            Int      @default(50)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  chapter     Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  course      Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submissions AssignmentSubmission[]

  @@index([chapterId])
  @@index([courseId])
}

model AssignmentSubmission {
  id           String    @id @default(cuid())
  userId       String
  assignmentId String
  content      String?
  fileUrls     String[]  @default([])
  score        Float?
  feedback     String?
  submittedAt  DateTime  @default(now())
  gradedAt     DateTime?

  assignment Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@unique([userId, assignmentId])
}

model DailyGoal {
  id          String   @id @default(cuid())
  userId      String
  date        DateTime @db.Date
  targetXP    Int
  currentXP   Int      @default(0)
  isCompleted Boolean  @default(false)

  @@unique([userId, date])
}

model Certificate {
  id               String   @id @default(cuid())
  userId           String
  courseId         String
  templateId       String?
  certificateUrl   String
  verificationCode String   @unique
  issuedAt         DateTime @default(now())

  course Course @relation(fields: [courseId], references: [id])

  @@unique([userId, courseId])
}
